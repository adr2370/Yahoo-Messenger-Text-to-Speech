/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MessageForm.java
 *
 * Created on Oct 15, 2011, 2:31:02 AM
 */
package yahoomessengertts;
import java.awt.Color;
import java.awt.Container;
import java.awt.event.KeyEvent;
import org.openymsg.network.Session;
import org.openymsg.network.event.SessionAdapter;
import org.openymsg.network.event.SessionEvent;
import java.util.Scanner;
/**
 *
 * @author Shahid Chohan
 */
public class MessageForm extends javax.swing.JFrame {
    static String sn,pw = "";
    private static String USERNAME = "";

    private static String RECIPIENT = "TuringCleverBot";

    private static String PASSWORD = "";
    static String lastmsg = "";
    static String lastrecipient = "";
    /** Creates new form MessageForm */
    public MessageForm() {
        initComponents();  
        jTextArea1.setEditable(false);        
        Container cp = getContentPane();
        cp.setBackground(new Color(119,36,111));
        recipientLabel.setForeground(new Color(255,255,255));
        messageField.setText("");
        recipientField.setText(""); 
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        messageField = new javax.swing.JTextField();
        sendButon = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        recipientLabel = new javax.swing.JLabel();
        recipientField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(123, 0, 153));

        messageField.setText("jTextField1");
        messageField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                messageFieldKeyPressed(evt);
            }
        });

        sendButon.setText("Send");
        sendButon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButonActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        recipientLabel.setText("Recipient:");

        recipientField.setText("jTextField1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(messageField, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendButon)))
                .addContainerGap(84, Short.MAX_VALUE))
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
            .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(recipientLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(recipientField, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(190, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(recipientLabel)
                    .addComponent(recipientField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(messageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sendButon))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void sendButonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButonActionPerformed
        String msg = messageField.getText();                
        messageField.setText("");               
        final Session sender = new Session();
        try 
        {
         //   final ReceiveMessageAdaptor listener = new ReceiveMessageAdaptor();

            sender.login(USERNAME, PASSWORD);
            //Thread.sleep(1000); // wait for any offline messages to disappear.
           // sender.addSessionListener(listener);
           // String resp = "";
            if(msg != null)               
            {
                System.out.println(msg);
                RECIPIENT = recipientField.getText();
                if(!RECIPIENT.equals(lastrecipient) && !lastrecipient.equals(""))
                {
                    jTextArea1.setText("");// = new jTextArea();
                }
                lastrecipient = RECIPIENT;
                jTextArea1.append(USERNAME+": " + msg+"\n");
                jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
                if(!RECIPIENT.equals(""))
                {
                    sender.sendMessage(RECIPIENT, msg);
                    lastmsg = msg;
                }
            //        TTS speak=new TTS(msg);
            }
            Runnable run = new ValidateThread();
            Thread thread = new Thread(run);
            thread.start();
//           SessionEvent event;// = listener.waitForNextEvent(0);        
//           //System.out.println(""+event.getMessage());    
//           //resp = event.getMessage();
////           
//           while(resp == null || resp.equals("")) {
//               event = listener.waitForNextEvent(100000);                       
//               resp = event.getMessage();
////               
//           }
//           jTextArea1.append(RECIPIENT+": " + resp+"\n");
            
        }
        catch(Exception e)
        {
            
        }
    }//GEN-LAST:event_sendButonActionPerformed

    private void messageFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_messageFieldKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            String msg = messageField.getText();                
        messageField.setText("");               
        final Session sender = new Session();
        try 
        {
         //   final ReceiveMessageAdaptor listener = new ReceiveMessageAdaptor();

            sender.login(USERNAME, PASSWORD);
            //Thread.sleep(1000); // wait for any offline messages to disappear.
           // sender.addSessionListener(listener);
           // String resp = "";
            if(msg != null)               
            {
                System.out.println(msg);
                RECIPIENT = recipientField.getText();
                if(!RECIPIENT.equals(lastrecipient) && !lastrecipient.equals(""))
                {
                    jTextArea1.setText("");// = new jTextArea();
                }
                lastrecipient = RECIPIENT;
                jTextArea1.append(USERNAME+": " + msg+"\n");
                jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
                if(!RECIPIENT.equals(""))
                {
                    sender.sendMessage(RECIPIENT, msg);
                    lastmsg = msg;
                }
            //        TTS speak=new TTS(msg);
            }
            Runnable run = new ValidateThread();
            Thread thread = new Thread(run);
            thread.start();
//           SessionEvent event;// = listener.waitForNextEvent(0);        
//           //System.out.println(""+event.getMessage());    
//           //resp = event.getMessage();
////           
//           while(resp == null || resp.equals("")) {
//               event = listener.waitForNextEvent(100000);                       
//               resp = event.getMessage();
////               
//           }
//           jTextArea1.append(RECIPIENT+": " + resp+"\n");
            
        }
        catch(Exception e)
        {
            
        }
        }
    }//GEN-LAST:event_messageFieldKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String a, String b) {
        USERNAME = a;
        PASSWORD = b;
        
        java.awt.EventQueue.invokeLater(new Runnable() {
         
            public void run() {
                new MessageForm().setVisible(true);
            }
        });
    }
    
    class ValidateThread implements Runnable{
        public void run()
        {
             final Session sender = new Session();
            final ReceiveMessageAdaptor listener = new ReceiveMessageAdaptor();
            try
            {
                sender.login(USERNAME, PASSWORD);
            }
            catch(Exception e){
            }            
            //Thread.sleep(1000); // wait for any offline messages to disappear.
            sender.addSessionListener(listener);
            SessionEvent event;// = listener.waitForNextEvent(0);        
           //System.out.println(""+event.getMessage());    
           //resp = event.getMessage();
            String resp = "";
            if(RECIPIENT.equals("TuringCleverBot"))
            {
                ChatterBotApiTest bot = new ChatterBotApiTest();                
                try{                   
                resp = bot.response(lastmsg);}catch(Exception e){}
            }
            else
            {            
                while(resp == null || resp.equals("")) {
               event = listener.waitForNextEvent(100000);                       
               resp = event.getMessage();
                }
//               
           }
           jTextArea1.append(RECIPIENT+": " + resp+"\n");
           jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());
           TTS speak=new TTS(resp);
        }
    }
    private static class ReceiveMessageAdaptor extends SessionAdapter {
       
        private SessionEvent sessionEvent = null;

        public ReceiveMessageAdaptor() {
            // doesn't do much, but prevens synthetic accessor warnings.
        }

        /*
         * (non-Javadoc)
         * 
         * @see org.openymsg.network.event.SessionAdapter#messageReceived(org.openymsg.network.event.SessionEvent)
         */
        @Override
        public void messageReceived(SessionEvent event) {
            this.sessionEvent = event;
        }

        /**
         * Waits for a particular amount of time for the next event to arrive, and then returns that event. If within
         * the timeout no event has been received, this method returns null.
         * 
         * @param timeout_in_millis
         *            The time (in milliseconds) to wait for the next event.
         * @return 'null' or the first event that arrived within the timeout value.
         */
        public SessionEvent waitForNextEvent(long timeout_in_millis) {
            if (timeout_in_millis < 0) {
                throw new IllegalArgumentException("Cannot use negative timeout values.");
            }

            if (sessionEvent != null) {
                throw new IllegalStateException("There's already an event queued, before this method was called.");
            }

            final long STEP_IN_MILLIS = 100;
            SessionEvent result = null;
            for (int i = 0; i < timeout_in_millis; i += STEP_IN_MILLIS) {
                if (sessionEvent != null) {
                    result = sessionEvent;
                    break;
                }

                try {
                    Thread.sleep(STEP_IN_MILLIS);
                }
                catch (InterruptedException e) {
                    // ignore
                }
            }

            sessionEvent = null;
            return result;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField messageField;
    private javax.swing.JTextField recipientField;
    private javax.swing.JLabel recipientLabel;
    private javax.swing.JButton sendButon;
    // End of variables declaration//GEN-END:variables
}
